Michael Feathers: Working Effectively with Legacy Code (WELC)

The Legacy Code Change Algorithm

1. Identify change points.
2. Find test points.
3. Break dependencies.		(see Chapter 25 Dependency-Breaking Techniques below)
4. Write tests. 		(see Chapter 13.1 Characterization Tests below)
5. Make changes and refactor.	(see 5 Make changes and refactor at the end)

Chapter 25 Dependency-Breaking Techniques

In this chapter, I’ve written up a set of dependency-breaking techniques. Technically, 
these techniques are refactorings—each of them preserves behavior. But unlike most
refactorings written up in the industry so far, these refactorings are intended to
be done without tests, to get tests in place. In most cases, if you follow the steps
carefully, the chance of mistakes is small.

S. Subclass and Override Method
A. Parametrize Constructor
B. Extract Interface
C. Skin and Wrap the API (ch. 15)
D. Introduce Instance Delegator

S. Subclass and Override Method is a core technique for breaking dependencies in
object-oriented programs. In fact, many of the other dependency-breaking
techniques in this chapter are variations on it.
To Subclass and Override Method, do the following: (WELC 403)
1. Identify the dependencies that you want to separate. Try to find the 
smallest set of methods that you can override to achieve your goals.
2. Make each method overridable. The way to do this varies among programming
languages. In Java, the methods need to be made non-final.
3. If your language requires it, adjust the visibility of the methods that you
will override to so that they can be overridden in a subclass.
4. Create a subclass that overrides the methods. Verify that you are able to
build it in your test harness.

A. To Parameterize Constructor, follow these steps: (WELC 382)
1. Identify the constructor that you want to parameterize and make a copy
of it.
2. Add a parameter to the constructor for the object whose creation you are
going to replace. Remove the object creation and add an assignment
from the parameter to the instance variable for the object.
3. If you can call a constructor from a constructor in your language,
remove the body of the old constructor and replace it with a call to the
old constructor. Add a new expression to the call of the new constructor
in the old constructor. If you can’t call a constructor from another constructor
in your language, you may have to extract any duplication
among the constructors to a new method.

B. To Extract Interface, follow these steps: (WELC 366)
1. Create a new interface with the name you’d like to use. Don’t add any
methods to it yet.
2. Make the class that you are extracting from implement the interface.
This can’t break anything because the interface doesn’t have any methods.
But it is good to compile and run your test just to verify that.
3. Change the place where you want to use the object so that it uses the
interface rather than the original class.
4. Compile the system and introduce a new method declaration on the
interface for each method use that the compiler reports as an error.

C. When we Skin and Wrap the API, (WELC 205)
we make interfaces that mirror the API as close as possible and 
then create wrappers around library classes. To minimize
our chances of making mistakes, we can Preserve Signatures (312) as we work.
One advantage to skinning and wrapping an API is that we can end up having
no dependencies on the underlying API code. Our wrappers can delegate to the
real API in production code and we can use fakes during test.

Here are the steps for Wrap Class: (WELC 74)
1. Identify a method where you need to make a change.
2. If the change can be formulated as a single sequence of statements in one
place, create a class that accepts the class you are going to wrap as a constructor
argument. If you have trouble creating a class that wraps the
original class in a test harness, you might have to use Extract Implementer
(356) or Extract Interface (362) on the wrapped class so that you
can instantiate your wrapper.
3. Create a method on that class, using test-driven development (88), that
does the new work. Write another method that calls the new method
and the old method on the wrapped class.
4. Instantiate the wrapper class in your code in the place where you need to
enable the new behavior.

class LoggingPayDispatcher extends Employee {
    private Employee e;
    
    // 2. wrapped class as a constructor argument
    public LoggingPayDispatcher(Employee e) {
        this.e = e;
    }
 
    // 1. method to change
    public void pay() {
        logPayment();
        employee.pay();
    }

   // new work (TDD)
   private void logPayment() { ... }

   ...
}

D. To Introduce Instance Delegator, follow these steps: (WELC 371)
1. Identify a static method that is problematic to use in a test.
2. Create an instance method for the method on the class. Remember to
Preserve Signatures (312). Make the instance method delegate to the
static method.
3. Find places where the static methods are used in the class you have under
test. Use Parameterize Method (383) or another dependency-breaking
technique to supply an instance to the location where the static method
call was made.

public class BankingServices {

    // 1. static method that is problematic to use in a test
    public static void updateAccountBalance(int userID, Money amount) {
        ...
    }

    // 2. instance method for the method
    public void updateBalance(int userID, Money amount) {
        updateAccountBalance(userID, amount);
    }

    ...
}

public class SomeClassUnderTest {

    // 3. parametrized method
    public void someMethod(BankingServices services) {
        ...
        // BankingServices.updateAccountBalance(id, sum);
        services.updateBalance(id,sum);
    }

    ...
}

Chapter 13.1 Characterization Tests

Here is a little algorithm for writing characterization tests:

1. Use a piece of code in a test harness.
2. Write an assertion that you know will fail.
3. Let the failure tell you what the behavior is.
4. Change the test so that it expects the behavior that the code produces.
5. Repeat.

In the following example, I’m reasonably sure that a PageGenerator is not
going to generate the string “fred”:

void testGenerator() {
    // 0. arrange
    PageGenerator generator = new PageGenerator();

    // 1. act, 2. assert
    assertEquals("fred", generator.generate());
}

Run your test and let it fail. When it does, you have found out what the code
actually does under that condition.

5. Make changes and refactor.

Typical refactoring pattern:

5.1 Extract Method
Extract Method to meet Single Level of Abstraction (SLA). 
Design Test First by refactor into test. 
Lower size and cyclomatic complexity of methods (eg. max 10 lines, max CC 8).

5.2 Extract Class
Extract Class to meet Single Responsibility Principle (SRP). 
Look at LCOM4 metric to split classes. 
Reduce number of methods per class (eg. max 10).
